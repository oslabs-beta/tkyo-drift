/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*::::-%@@#:..-:..+@@@@@@@@@%#++==+*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%##########********#######%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+:#@@@@@@=.-=+#++:..:=+*##*=..*%%@@@@%#=:@@@@@@@@@@%**@@@@@@@@@@@%#+=-::..::-==+**######%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%#:.-@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@@@@@@@@@@+%@@@@@@@@@@:.-:=#@@@@@@@@@@@@@%%=%@@@@@@%*.:-*%%%%*-*+=-:.:-=+*#%%######%%%%###***+++=====--------======+++++++****####%%%%@@%%#=--:+@@@@@@@@@@@@@@@@@@@@@@@=-@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+*@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@%-%%%+..=#%%#####*+=--=+**##%%%%%#*++=--::.........................................:%@%.....:...:::-=+*#%@@@@@@@@@**:@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@@@@@%#%#:-%####%%#**+=-:.                                                                 -%#. :.....::::::::::::::::::-*.@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@%@@@%%=:%%*..                                                                              .%@:..:.....::::::::::::::::=-:@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@=-@@*@@@@@@@@@@@@@@@@@@@@@%*==-:.-#@@@@@@@@@@@@@@@@@@@@@%:#%+..            .************=:*****:.=****+-+****===*####=--+#%@@@@%#*::::...........%%:..-.   :@@@@@@@@@@@@@@@==-@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@=--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%+.*@@@@@@@@@@@@@@@@@@=-%%..       ......:@@@@@@@@@@@@%.%@@@@=+@@@@%:.*@@@@#:.#@@@@+.%@@@@@@@@@@@@:....     --.=.#@-..::    +@@@@@@@@@@@@@+=+@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@#-%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#:@@@#@@@@@@@@@@@@%.*#+.:=++:.     .......:%@@@@*:...%@@@@%@@@@@-..-@@@@@=.*@@@@%.@@@@@=..@@@@@:           -=--:%%...--    .%@@@@@@@@@@@=-%@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@%.#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=@@@@-*@@@@@@@@@*-%%.:-:-=*@@%::... .+.  %@@@@#.#-.#@@@@@@@@@@@@*.-@@@@@@@@@@@=.*@@@@#..%@@@@**:          .=+=-.%@:..--.    =@@@@%%%%%@*=@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@-+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@#-:-=+*+-=##:--:=-..:==%@%=-.....#@@@@%.   :@@@@@+=#@@@@%. .-@@@@@@@%:..=@@@@@. =@@@@%. ..:.         =+=:-@%...:=..+%%#****####%-%@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@%.%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.+#+:-+=+:.   . =---%%+-.:@@@@@.   .@@@@@#:+@@@@@:    #@@@@%.....@@@@@@@@@@@@#.               :+++.=@%=:.=:=:+@@%########%.@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@*:%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=-:----....:#@:##=::+++.       ...==.-@*@@@@@-... *@@@@-..%@@@@%. ..*@@@@#. ....=@@@@@@@@@+.                  -++-.*@*==..*:@@%%######%*+=@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@*:%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+*####*=:=*=-%*.*#=--+++.          ....+:.+@=-.  ..             ...##-.......... ....       ...........         .=-=.-@@*-+-=............=@@@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@%.*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.%#####%@*::.-:*#-.=+==.                 .=..##:...          ........:##:........... .-=+++====------------:.   ......*@@=-==-.:+*#*:%%%#-:#@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@=:#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%-:.:::...:=#:##=:-+=-.                   .....*@###########%@@#***%@###########@@#===+@%###########@@+*@%###########%@@@##############@%***-:@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@:=:.#@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@%#+:...+**#+ . ....:-==+++=---::::-==++**#%@+             :@@@@@-            -@@@@@#           +@@@@+           .@@%.             *@****+:.=@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@#.=++++.-#%@@@@@@@@@@@@@@@%-@@@@@@@@@@@@@@@*:%-::==***#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@*    +@@@%.    *@@@@#.   %@@@.   .#@@@@@@@@:    #@@@@@@@%.   +@@@@@@@@@@@@@@=    :@@@@@@###%%*.:.:@@@@@@@@@@@@@@@@@@@        
@@@@%:. ..-+**-....=%%%@@@@@@@@%#:*@@@@@@@@@@@@@+.+-.++==-*##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%.   +@@@@@.   .@@@@@    -@@@#.  :@@@@@@@@@*    =@@@@@@@@.   :@@@@@@#*@@@#.%@:    @@@*++-#@@@@*.:..*@@@@@@@@@@@@@@@@@@        
@@@+-#@@@@@@@@@@@@+.=:..-+++=:.=.#@@@@@@@@@@@@@@#..#@%@-=*##%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    -@@@@@=   .@@@@@:            -#@@@@@@@%.   -@@@@@@@@-         #@@@@@@=%@-   .#%-#%%*+@@@@@+.:  -@@@@@@@@@@@@@@@@@@        
%-@@@@@@@@@@@@@@@@@+..+@=.*@@@@@.*%%@@@@%%@@%..*-=*@@#@:**%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@-   .@@@@@+    #@@@@-    -@@@-    =@@@@@@@@.   :@@@@@@@@=    +@@@@@@@@@@@%*@+    +@:.     .=@@@=.:  :@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@@*%@@@@@+*@@@@@#=..=*@@@.:**##*:%@@##-+*%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@*    -***+-    #@@@@+    %@@@@@.   =@@@@*++:    :++%@%%@*    *@#**=#%@@@@@@@%.   =@+..      ..:*-.:  :%@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@%*@@@@@@@*@@@@@@@@:-%%%:.#####+:%@@#=*++#%%%%%*%%@@@@@@@@@@@@@@@@@@@@@*            .-@@@@@%.   #@@@@@.    @@@@.          -@%#@@.   *@#**-%%*-...-@%    :@@:    ..  ....:.:  .%@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@%.   -**###-:@@@%**=*==#%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@%%%%%@@@@@@@%%%@@@@@@@#=@@@@@@@@@@@@@@*:+@@@@@@@#++=:=++++++*@@@@@@@@*.    .=..  .:..:. .#@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@: .=-.=+%@%%-...-*#-:+++++++++++++====---:::...........................::::--------:::.::.-++++++++++++=.++++++++++++-:+++++++=.=#@@@@*+.    :.-.: ....:=*=#@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%.:=-:..=+%@%%-.-+++++:-++++++++++=:=++++++++++++-.:-:Authored By:                      ::.=+++++++++++++:-++++++++++++:-+++++-.=:=%@@@@=-     :.:.: .::.-**=*@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@=@@@@@@@@@@@@@@@@+..%@@.-=:-   =+#@@%=.-=++++=.=++++++++++:=+++++++++++++=..-:Tico, Milti, Anthony, Wing, Monique==++++++=======.-=====--:::::--=*##*-..:=@@@@%=:     .::.:  --.-**-*@@@@@@@@@@@@@@@@@        
@@@@@@@@@@*-@@@@@@@@@@@@@@@@@@@-=-:=....  =+*@@@+ .:-++++:.==++++++++=.==+++++++++++==...................::--==++*****+++======-----:::::---==+++*****######%%%#%%%%*@@@@%=.     .=:.: ..:::**-#@@@@@@@@@@@@@@@@@        
@@@@@@@@@@+:@@@@@@@@@@@@@@@@@@@@.:=.......-##@@@*...-**+++**##%%%%%%%%%%%%##**+++=======+++***###%%%%%%@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%#####***###%%%%@@@@@@@%%%%%%%%#@@@@%:....  .=... :.:-.**-#@@@@@@@@@@@@@@@@@        
@@@@@@@@@@#.+@@@@@@@@@@@@@@@@@@@.=-.-==....##@@@%**%%%%%%####*******####%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#%%%%%%%@@@@*..:..  .-... :..- =*=%@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@#.:%@@@@@@@@@@@@@@@@%.=.=+==.:..=%@@@@%#@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%#####***********+++============+**##%%%%%%%##%@@@@@@@@@@@@@@@@@@@%%##**+*@%%@#*++=.-::..  .:... :..-.:*-###%%%%@@@@@@@@@@@        
@@@@@@@@@@@@@*...-#@@@@@@@@@@@@#:=:+==-.:...=%@@@@%%@@@@@@@@@@@@@@@@@@@@@%%@@@@%%%%%##**+===-----:::::........... ......:::--.    .  .%@#--:::---=--::::.-=++++:%%@@@@@#:.=.:..  ..... ..::.....................:        
@@@@@@@@@@@@@@@@@@@%.+@@@@@@@@@*-=-+=-=:..    -+#%%%++********########***%@-..  ....:===:....::::........:::::::::::::::..:===-   : .=.%@%########*+..    .=++=#@@@@@@@%.-=..    .. :.  -:....:::----==+*%@@@@@@@        
@@@@@@#@@@@@@@@@@@@@+:@@@@@@@@@*:====-=:..    .%@@@#=++++.....++++***####@%-..  : ..-==-:.........................:::-------==+:.::  :+-%@%########*..     =-=#@@@@@@@@-.=::.      .:  .::.#@@@@@@@@@@@@@@@@@@@@@        
@@@@@@+%@@@@@@@@@@@@@@*:-+%@@@@%:+++==-=..    .=@@@@#-++.      +########@@*-=.  :-:-===:::::::::::.:::::::::::::::.........:-==++====.:+=@@%#######%%=. .:-.+%@@@@@@@@#.:-..       .  .::.:++++++***#####%%%%%@@@        
@@@@@@@+*@@@@@@@@@@@@@@-@@@@@@@@.=*+====-.    ..#@@@@%=:-     .%#######%@@-+::=====++=:.......................:::-------::::.-==-:--.. =#=@@@%#%%@@@@@%=:*=#@@@@@@@@@%-.-..           ::.-@@@@@@@@@@@@@@@@@@@%%%%        
@@@@@@@@%:+@@@@@@@@@@@@.@@@@@@@@*-+*+*##*-..  ..=@@@@@@*=:=*#%@@@%%##%@@@#==. ..::-===:::::::::::::::::--------::::::::::::::::::::--==-:-%@@%%##%%%@%%@@@@@@@@@@@@@%+....           :..:@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@%::*@@@@@@@@=.@@@@@@@@:-=*#####*:.....*@@@@@@@@@%####*++*#%@@@-.-++=---::::::..............:::---==+++++++++++*++=-:::-+#%%@@@@@@@@@@@@@@@@@@@@@@@@@@@%#+-.            .:. .#@@@@@@@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@-++=+++=+-.#@@@@@@%.-+=*=+====-...:*%@@@@@@@@@@@@@@@@@@@@@@@%%%##**++====--------=================+++++***##%%@@@@@@@@@@@@@@@%%%%###***++==--::::..             ... ..-***###%%@@@@@@@@@@@@@@@@@@@        
@@@@@@@@@@@@@@@#-++++=*=-=+.-%@@@@@:.-+===+-.   ..:***#%%%%%%%@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%##**++==--:::....                                                                                                         
@@@@@@@@@@@@@@@@@%+:--::=****=:..::-. ......       ...:::::..........................                                                                                                                           .        
@%%%####******+++++++++=============------:::::.............                                                   ...............................::::::::::::::::::::::------=====+++++++*******#######%%%%%%@@@@@@@        
@@@@@@@@@@@@@@@@@@%%%##############%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
import fs from 'fs';
import path from 'path';
import { v4 } from 'uuid';
import makeLogEntry from './util/makeLogEntry.js';
import { DriftModel } from './util/DriftModel.js';

// * Global Variables for the utilities

//  Models to embed the I/O Data
export const MODELS = {
  semantic: 'Xenova/all-MiniLM-L6-v2',
  concept: 'Xenova/distilroberta-base',
};
// Upper limit on I/Os to capture for the training data baseline (this is ignored when using the batch call)
export const TRAINING_MAX_SIZE = Math.max(10000, 0);
// Upper limit on I/Os to capture for the rolling data baseline (this is never ignored)
export const ROLLING_MAX_SIZE = Math.max(10, 0);
// Location to save data files 
// TODO: This is relative to where the script runs, which will put data in weird places
export const OUTPUT_DIR = path.resolve('./data');
// Cache of pipeline output results, to speed up model loading
export const MODEL_CACHE = {};

export default async function tkyoDrift(input, output) {
  // Stopwatch START 🏎️
  console.time('Drift Analyzer Full Run');

  // Make model holder object, io types, and baselines (don't change these)
  const driftModels = {};
  const ioTypes = ['input', 'output'];
  const baselineTypes = ['rolling', 'training'];

  //  ------------- << Construct Model Combinations >> -------------
  // * For each model, for each ioType, for each baselineType,
  // make a model and assign to driftModels object
  for (const [modelType, modelName] of Object.entries(MODELS)) {
    for (const ioType of ioTypes) {
      for (const baselineType of baselineTypes) {
        const key = `${modelType}.${ioType}.${baselineType}`;
        driftModels[key] = new DriftModel(
          modelType,
          modelName,
          ioType,
          baselineType
        );
      }
    }
  }
  
  //  ------------- << Initialize Model File Pathing >> -------------
  // * For each model, invoke set file path method
  // ! NOTE: If training data is not supplied, it will use the rolling file's path
  // Yes, this is intentional, check the ReadMe for why...
  for (const model of Object.values(driftModels)) {
    model.setFilePath();
  }
  
  //  ------------- << Load the Xenova Models >> -------------
  // * Load all models sequentially
  // ! NOTE: Loading models sequentially is intentional, as they check the cache before attempting to load
  for (const model of Object.values(driftModels)) {
    await model.loadModel();
  }
  
  // ------------- << Get Embeddings >> -------------
  // * Get embeddings for all inputs and outputs in parallel
  // TODO: We need to check to see if make embedding calls can block other calls. No problems so far in my testing -tico
  await Promise.all(
    Object.entries(driftModels).map(([key, model]) => {
      const isInput = key.includes('.input.');
      const text = isInput ? input : output;
      return model.makeEmbedding(text);
    })
  );
  
  // ------------- << Save Data >> -------------
  // * Save the embedding to the rolling/training files in parallel
  // ! NOTE: Write ops are done to separate files, this is safe
  // Check if directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }
  
  // For each model, write to disk
  await Promise.all(
    Object.values(driftModels).map((model) => model.saveToBin())
  );
  
  // ------------- << Read Bin Files >> -------------
  // * Read up to N embeddings from binary blobs in parallel
  // ! NOTE: Read ops are non-locking, this is safe
  // ? See Training Max Size/Rolling Max Size in ReadMe for more info
  // For each model, read from disk
  await Promise.all(
    Object.values(driftModels).map((model) => model.readVectorsFromBin())
  );
  
  // ------------- << Get Baseline >> -------------
  // * Calculate Baseline values for each model in serial
  // ! NOTE: You can make this async, but it doesn't do anything
  // For each model, calculate the baseline
  for (const model of Object.values(driftModels)) {
    model.getBaseline();
  }
  
  // ------------- << Get Cosine Similarity >> -------------
  // * Calculate Cosine Similarity between input and baseline in serial
  // ! NOTE: You can make this async, but it doesn't do anything
  const similarityResults = Object.fromEntries(
    Object.entries(driftModels).map(([key, model]) => [
      key,
      model.getCosineSimilarity(),
    ])
  );

  // ------------- << Make & Append Log Entries >> -------------
  // * Push the results to the log
  // Make shared ID and date for I/O Pair
  const sharedID = v4();
  makeLogEntry(sharedID, similarityResults);

  // Stopwatch END 🏁 (Comment this out in production)
  console.timeEnd('Drift Analyzer Full Run');
  console.log(similarityResults);
}

const input = 'How do you calculate the sum of an integral?';
const output = 'Blue balloons are floating through space and time.';
tkyoDrift(input, output);
